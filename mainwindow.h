#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QStandardItemModel>
#include <QDebug>
#include "iprecord.h"
#include "netmask.h"
#include <QAbstractItemView>
#include "networkinfo.h"
#include "networktreemodel.h"
#include "networktreeview.h"
#include <queue>
#include "netinputdialog.h"
#include <QFileDialog>
#include <QMessageBox>


QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:
    void setBusyNode(const QModelIndex &index);                 // установить значение занятости в узле

    void displayStatusSearch();

    void displayStatusMakedBusyNodes(const QVector<unsigned int> &vals);

    void displayStatusFileReadActive();

    void displayStatusFileWriteActive();

    void displayStatusModelExpanded();

    void on_action_create_triggered();

    void on_action_search_triggered();

    void on_action_clear_tree_triggered();

    void on_action_split_triggered();

    void on_action_exit_triggered();

    void on_action_open_triggered();

    void on_action_help_triggered();

    void on_action_save_triggered();

private:
    Ui::MainWindow *ui;
    NetworkTreeModel * model;
    QString color_error = "color: rgba(178, 34, 34);";
    QString color_message = "color: rgba(0, 0, 0);";

    //=========== Согласно RFC 5737 приведенные адреса зарезервированы для документации =========================
    /* Три блока адресов IPv4, предназначенных для использования в документации.
       Сетевым операторам следует добавить эти блоки адресов в число немаршрутизируемых,
       а при использовании пакетных фильтров следует добавить эти адреса в списки фильтрации.
       Блоки адресов не предназначены для локального использования и фильтры могут
       применяться как в локальном, так и в публичном контексте.

       Блоки адресов для документации:
            192.0.2.0/24 (TEST-NET-1),
            198.51.100.0/24 (TEST-NET-2),
            203.0.113.0/24 (TEST-NET-3)*/
//    QVector <IPrecord> RFC_5737 = {IPrecord(192, 0, 2, 0),
//                                  IPrecord(198, 51, 100, 0),
//                                  IPrecord(203, 0, 113, 0)};
//    NetMask RFC_5737_m = NetMask(24);
    //===========================================================================================================

    //=========== Согласно RFC 1918 приведенные адреса являются частными =======================================
    // Блоки частных(серых) адресов:
    // 10.0.0.0        -   10.255.255.255  (10/8 prefix)
    // 172.16.0.0      -   172.31.255.255  (172.16/12 prefix)
    // 192.168.0.0     -   192.168.255.255 (192.168/16 prefix)
//    QVector<IPrecord> RFC_1918 = {IPrecord(10, 0, 0, 0),
//                                  IPrecord(172, 16, 0, 0),
//                                  IPrecord(192, 168, 0, 0)};
//    QVector<NetMask> RFC_1918_m = {NetMask(8),
//                                   NetMask(12),
//                                   NetMask(16)};
    //===========================================================================================================

    //=========== Согласно RFC 3068 =============================================================================
    /* 6to4 — это переходный механизм,
     * позволяющий передавать IPv6-пакеты через IPv4-сети и не требующий
     * создания двусторонних туннелей.
     * Это, как правило, используется, когда конечный пользователь
     * или сайт хотят получить соединение с IPv6-Интернетом,
     * но не могут получить его от провайдера.

     * Для того чтобы 6to4-узлы могли отправлять пакеты в другие IPv6-сети,
     * были созданы 6to4-ретрансляторы, которые подключены как к IPv4-сети,
     * так и к IPv6-сети.
     * Когда 6to4-узлу нужно отправить IPv6-пакет, он отправляет его
     * по anycast адресу 192.88.99.1. Ретранслятор, получив 6to4-пакет,
     * извлекает IPv6-пакет и отправляет его по IPv6-сети. Для IPv6-узлов 6to4-узлы выглядят,
     * как обычные IPv6-узлы и IPv6-пакет будет передан на ближайший 6to4-ретранслятор,
     * анонсирующий префикс сети 2002::/16.
     * Например,
     * IPv4: 192.0.2.4 --> IPv6: 2002:c000:0204::/48

     * 192.88.99.1 необходим для доступа к ближайшему ретранслятору 6to4 anycast
     */

//    IPrecord RFC_3068 = IPrecord(192, 88, 99, 0);
//    NetMask RFC_3068_m = NetMask(24);

    /*
     * RFC 3068 и 6732 были перемещены в Исторический
     * статус
    */

    //===========================================================================================================

    //============ Согласно RFC 3927 ============================================================================
    /* Динамическая настройка локальных адресов IPv4
     *
     * Link-Local Address — адреса сети,
     * которые предназначены только для коммуникаций в пределах одного
     * сегмента местной сети или магистральной линии. Они позволяют обращаться
     * к хостам, не используя общий префикс адреса.
     *
     * Подсети link-local не маршрутизируются: маршрутизаторы не должны отправлять
     * пакеты с адресами link-local в другие сети.
     * Адреса link-local часто используются для автоматического конфигурирования сетевого адреса,
     * в случаях, когда внешние источники информации об адресах сети недоступны.
     *
     * Типичное использование link-local адресов — автоматическое конфигурирование IP-адресов
     * в локальных сетях Ethernet. Адрес из диапазона link-local назначается ОС хоста автоматически
     * в случае недоступности других источников информации, например сервера DHCP.
     */

//    IPrecord RFC_3927 = IPrecord(169, 254, 0, 0);
//    NetMask RFC_3927_m = NetMask(16);
    //===========================================================================================================

    //=========== Согласно RFC 1122 =============================================================================
    //===========================================================================================================

    //=========== Согласно RFC 3330 =============================================================================
    //===========================================================================================================
};
#endif // MAINWINDOW_H
